//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/StartMenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StartMenuControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StartMenuControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StartMenuControls"",
    ""maps"": [
        {
            ""name"": ""StartGame"",
            ""id"": ""a6b825b5-9373-46df-a7b8-22202cb08b7c"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""5ec749a5-1554-45c0-958c-b7dfa83fc43d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""102110b7-00e5-4ec3-a785-0124be575b62"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // StartGame
        m_StartGame = asset.FindActionMap("StartGame", throwIfNotFound: true);
        m_StartGame_Play = m_StartGame.FindAction("Play", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // StartGame
    private readonly InputActionMap m_StartGame;
    private List<IStartGameActions> m_StartGameActionsCallbackInterfaces = new List<IStartGameActions>();
    private readonly InputAction m_StartGame_Play;
    public struct StartGameActions
    {
        private @StartMenuControls m_Wrapper;
        public StartGameActions(@StartMenuControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_StartGame_Play;
        public InputActionMap Get() { return m_Wrapper.m_StartGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StartGameActions set) { return set.Get(); }
        public void AddCallbacks(IStartGameActions instance)
        {
            if (instance == null || m_Wrapper.m_StartGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StartGameActionsCallbackInterfaces.Add(instance);
            @Play.started += instance.OnPlay;
            @Play.performed += instance.OnPlay;
            @Play.canceled += instance.OnPlay;
        }

        private void UnregisterCallbacks(IStartGameActions instance)
        {
            @Play.started -= instance.OnPlay;
            @Play.performed -= instance.OnPlay;
            @Play.canceled -= instance.OnPlay;
        }

        public void RemoveCallbacks(IStartGameActions instance)
        {
            if (m_Wrapper.m_StartGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStartGameActions instance)
        {
            foreach (var item in m_Wrapper.m_StartGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StartGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StartGameActions @StartGame => new StartGameActions(this);
    public interface IStartGameActions
    {
        void OnPlay(InputAction.CallbackContext context);
    }
}
